<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
<channel>
  <title>Tyler Gaw: Articles</title>
  <link>http://tylergaw.com/</link>
  <managingEditor>me@tylergaw.com.com (Tyler Gaw)</managingEditor>
  <webMaster>me@tylergaw.com.com (Tyler Gaw)</webMaster>
  <description>An account of the work I do as a Web Designer</description>
  <lastBuildDate>Sat, 08 June 2013 20:00:00 EST</lastBuildDate>
  <language>en</language>
  <generator>Elbow grease</generator>
  <image>
    <url>http://tylergaw.com/images/rss-graphic.png</url>
    <title>Tyler Gaw Occasionally Writes About Web Design and Life</title>
    <link>http://tylergaw.com/</link>
    <width>144</width>
    <height>180</height>
  </image>
  <atom:link href="http://tylergaw.com/rss.xml" rel="self" type="application/rss+xml"/>
    <item>
        <title>WebVTT Cuemarker</title>
        <dc:creator>Tyler Gaw</dc:creator>
        <description>
            <![CDATA[
            <p>
            <a href="http://dev.w3.org/html5/webvtt/">WebVTT</a> is a text format
            that can be used to provide captions and subtitles for HTML video.
            While working on a project that uses it I found myself needing a
            way to find and mark precise cue in/out times.
            <a href="https://github.com/tylergaw/webvtt-cuemarker">webvtt-cuemarker</a>
            is a small tool I whipped up in JavaScript to do just that.
        </p>
        <h2>A WebVTT Primer</h2>
        <p>
            The format is still fairly new and not yet widely supported, so I'll give
            a quick example of how it's used.
        </p>
        <pre><code>WEBVTT FILE

00:00:01.265 --> 00:00:06.210
This is text that will appear over the video at during the in/out points.

00:00:05.500 --> 00:00:10.250
You can use <b>HTML</b> within WebVTT, pretty cool.
</code></pre>
        <p>
            That's an example of a very simple WebVTT file with two cues. We'll
            refer to it as <code>captions.vtt</code>
        </p>
        <p>
            The next thing to do is to let your HTML video know about the WebVTT file.
            That's done using the <code>track</code> element.
        </p>
        <pre><code>&lt;video controls&gt;
    &lt;source src="/path/to/video.mp4" type="video/mp4"&gt;
    &lt;source src="/path/to/video.webm" type="video/webm"&gt;
    &lt;track kind="captions" label="English captions"
        src="/path/to/captions.vtt" srclang="en" default>&lt;/track&gt;
&lt;/video&gt;
</code></pre>
        <p>
            That's all there is to it. If we played the fictional video above
            we would see the two captions appear at the times provided in <code>captions.vtt</code>.
            For a more in-depth look at the <code>track</code> element I suggest
            <a href="http://www.html5rocks.com/en/tutorials/track/basics/">Getting Started With the Track Element</a>
            on HTML5 Rocks. That's where I first learned about all this goodness.
        </p>
        <h2>Why Is Cuemarker Needed?</h2>
        <p>
            WebVTT is very specific about the time format for cues. Cue times must
            be represented exactly as shown in <code>captions.vtt</code>. It's
            easy to type out the times in that way, but how do you find
            precise times using HTML video? HTML video controls display the time
            of the video, but only down to the second. And not in the format needed
            for WebVTT. This is why I wrote Cuemarker.
        </p>
        <p>
            Cuemarker provides a keyboard shortcut–the period key–for setting in/out
            points and outputting the cue time in the required format.
        </p>
        <p>
            Cuemarker also provides shortcuts to interact with HTML
            video. You can play/pause using the space bar and
            seek forward/backward using the right/left arrow keys. Those controls
            allow you to arrive at more precise moments in video than you can
            using the default video scrubber provided by the browser.
        </p>
        <h2>How Do I Use It?</h2>
        <p>
            I'll go back to the HTML in the previous example, but I'm going to
            remove the <code>track</code> element. For marking cue times you only
            need an HTML video.
        </p>
        <pre><code>&lt;video controls&gt;
    &lt;source src="/path/to/video.mp4" type="video/mp4"&gt;
    &lt;source src="/path/to/video.webm" type="video/webm"&gt;
&lt;/video&gt;
</code></pre>
        <p>
            Once your HTML is in place, you'll need a bit of JavaScript.
            Cuemarker creates a variable–<code>cuemarker</code>–in the global scope.
            <code>cuemarker</code> is a function that takes one required parameter;
            the video element. It also takes a second, optional parameter to
            specify a seek interval and output function.
        </p>
        <pre><code>cuemarker(document.querySelector('video'));
</code></pre>
        <p>
            That's a bare-bones example and may be all that you'll need. The cue
            times will be output using <code>console.log</code>.
        </p>
        <p>
            Here's another example using both the available options.
        </p>
        <pre><code>cuemarker(document.querySelector('video'), {
  seekInterval: 0.5 //default is 0.03,
  output: function (cuetime) {
    var times = document.getElementById('cuetimes'),
        li = document.createElement('li');
      li.innerHTML = cuetime;
      times.appendChild(li);
    }
});
</code></pre>
        <p>
            In that example, the seek interval is less precise than the default
            and the cue times will be injected into the page as <code>li</code>
            elements that are children of the <code>ul</code> with an id of "cuetimes".
        </p>
        <figure>
            <img src='http://tylergaw.com/articles/assets/post-image-cuemarker-output.jpg' alt='Screenshot of Cuemarker output'>
            <figcaption>Cuemarker output</figcaption>
        </figure>
        <p>
            Cuemarker doesn't try to get cute by attempting to transfer cue times to
            a WebVTT file. All it's interested in doing is outputting the
            in/out times. Once you've marked in/out times you
            can copy them over to your WebVTT files. That's how I've been using
            it and it's working really well for me.
        </p>
        <p>
            A working demo of the latter example is located
            <a href="http://tylergaw.github.io/webvtt-cuemarker/demo.html">here</a>.
        </p>
        <h2>That's It?</h2>
        <p>
            Yep, that's what I got for now. Again, the <code>track</code> element
            and WebVTT are not yet widely supported. As of this writing only the
            latest Chrome and Opera are cool enough to do so. The Web moves fast though and
            I know it won't be long before Firefox and Safari follow suit.
        </p>
        <p>
            Limited support for the underlying technology means that this is a
            tool you may not need today, but you might tomorrow.
            <a href="https://github.com/tylergaw/webvtt-cuemarker">Fork it!</a>
        </p>
        <p>
            <i>Thanks for reading</i>
        </p>
            ]]>
        </description>
        <link>http://tylergaw.com/articles/webvtt-cuemarker</link>
        <guid>http://tylergaw.com/articles/webvtt-cuemarker</guid>
        <pubDate>Sat, 08 June 2013 20:00:00 -0400</pubDate>
    </item>
    <item>
        <title>Get Together. Get Excited. Get to Work.</title>
        <dc:creator>Tyler Gaw</dc:creator>
        <description>
            <![CDATA[
            <figure>
                <a href="http://brooklynalpha.org/2012">
                    <img src='http://tylergaw.com/articles/assets/post-image-brooklyn-alpha-2012.png' alt='Brooklyn Alpha 2012'>
                </a>
            </figure>
            <p>
                <b>Brass tacks:</b> <em>
                    <a href="http://brooklynalpha.org/2012">
                        Come to my build-a-thon, make cool shit!
                    </a>.
                </em>
            </p>
            <p class="entry-intro">
                If you haven't heard, Brooklyn is <b>the</b> place to be the
                second week of October 2012. That's the week that the Internet
                is getting together for a week of conferences, meet ups, drink-ups,
                shinanagans, and the friendliest little web build-a-thon that could.
                It just so happens that that build-a-thon is being organized and
                hosted by myself and <a href="https://twitter.com/xiian">Tom Sartain</a>.
                We'd love for you to join us!
            </p>
            <h2>What's this &#8220;build-a-thon&#8221;?</h2>
            <p>
                Alright, here's the deal. If you're a designer or a developer I
                know you have at least one project in your mind right now
                that you want to work on. And there's a good chance you've
                been thinking about working on this project for a while and for
                one reason or another haven't been able to dive in and get it done.
            </p>
            <p>
                Brooklyn Alpha is a perfect excuse to give yourself three days
                to put your idea into motion. Not only will you have three days, you'll
                have access to other motivated folks who may have complementary
                skills. Maybe you're a designer who needs a Python developer. Or
                you're Mr. Django himself and you need a designer to help
                make your project easy to use and easy on the eyes. Or maybe you're someone
                who has a head full of great ideas and you're looking for
                designers and developers to lend a hand in materializing all that
                greatness coming from your grey matter. Whatever your situation
                we'll have you covered.
            </p>
            <h2>&#8220;I don't have any ideas&#8221;</h2>
            <p>
                OK, OK. The brain well done gone dry. It happens to the best of us.
                Can you sling hot pixels or code? Of course you can. Then you should
                come to Brooklyn Alpha. Here's why. Last year when we opened up
                the floor to anyone to get up and pitch ideas, nearly every
                single one of our incredible attendees got up and did just that.
                And more than a few got up a second or third time. There will be
                no shortage of excellent ideas at Alpha and many of them will need
                your brain to get them moving.
            </p>
            <h2>OK, cool. What else?</h2>
            <p>
                I'll tell you what else. You get to be a part of something that's
                going to be huge. Brooklyn Alpha is sharing the week with the
                legendary <a href="https://brooklynbeta.org/">Brooklyn Beta</a>
                and we're an official part of <a href="https://brooklynbeta.org/beyond">Beyond Beta</a>.
                If you haven't heard of those stop reading this now and go find out
                about them (then hurry back and pick up your ticket to Alpha).
            </p>
            <p>
                Brooklyn Alpha will be taking place during the day each of its
                three days. That leaves the evenings free for maximum mingling
                with a whole host of excellent web folks that will for sure be
                inhabiting our incredible Borough of Brooklyn during the week.
            </p>
            <h2>Hope to see you there!</h2>
            <p>
                This is our second year hosting Brooklyn Alpha. It's a challenging,
                fun, and rewarding task to take on. We're doing this because
                we love the work we do, we love the city we live in, and we love
                the web community that makes events like this possible. We're
                honored to be able to surround ourselves with so many people that
                share our passions.
            </p>
            <figure>
                <a href="http://www.flickr.com/photos/brooklynalpha/6251904083/in/photostream">
                    <img src='http://farm7.staticflickr.com/6042/6251904083_1347d7870f_b.jpg' alt='Brooklyn Alpha 2011'>
                </a>
                <figcaption>Brooklyn Alpha 2011 Group Photo</figcaption>
            </figure>
            <p>
                <i>Thanks for reading</i>
            </p>
            ]]>
        </description>
        <link>http://tylergaw.com/articles/get-together-get-excited-get-to-work</link>
        <guid>http://tylergaw.com/articles/get-together-get-excited-get-to-work</guid>
        <pubDate>Mon, 24 Sept 2012 11:30:00 -0400</pubDate>
    </item>
  <item>
    <title>Reacting to Media Queries in Javascript</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
        <![CDATA[
            <p>
                <b>Brass tacks:</b> <em><a href="http://tylergaw.github.com/media-query-events/">A demo</a> and <a href="https://github.com/tylergaw/media-query-events">some code</a>.</em>
            </p>
            <p>
                <code>window.matchMedia</code> provides a way for Javascript to react when a media query condition is met or unmet. While the functionality it allows is great, the necessary code duplication required to use it leaves a bit to be desired. I'm going to walk through a work-in-progress approach to getting around that duplication.
            </p>
            <h2>window.matchMedia</h2>
            <p>
                The method is simple enough to use and works the way you'd expect it. You give it a media query string it gives you back a <a href="https://developer.mozilla.org/en/DOM/MediaQueryList">MediaQueryList</a> object.
            </p>
            <pre><code>var mql = window.matchMedia("(min-width: 480px)");</code></pre>
            <p>
                That sets the value of <code>mql</code> to a MediaQueryList object with two members, something like:
            </p>
            <pre><code>MediaQueryList: {
  matches: true,
  media: "(min-width: 480px)"
}</code></pre>
            <p>
                The boolean value of the <code>matches</code> member will be determined by the width of your browser window at the time.
            </p>
            <p>
                You can add event listeners to MediaQueryList objects. An event will fire each time the condition is triggered. This allows you to be updated on the status of the media query without having to resort to polling or a <code>window.resize</code> event. Using <code>mql</code> from above we can set up a listener and handler like so:
            </p>
            <pre><code>mql.addListener(handleMediaChange);
handleMediaChange(mql);

var handleMediaChange = function (mediaQueryList) {
  if (mediaQueryList.matches) {
    // The browser window is at least 480px wide
  }
  else {
    // The browser window is less than 480px wide
  }
}</code></pre>
            <p>
                You can find similar code examples and further explanation of MatchMedia on the <a href="https://developer.mozilla.org/en/DOM/window.matchMedia">Mozilla Developer Network</a>
            </p>
            <p>
                MatchMedia works pretty well. As usual there are some caveats that I'll mention later. My issue is with needing to specify the media query when you create the MediaQueryList. If you wanted an event to fire for every media query you might have, you'd have manually copy each from your stylesheets to you JS. Every time you update a media query in CSS, you'd have to do the same in JS. What I want is a script to look at a page's stylesheets, pick out all the media queries and create a MediaQueryList for each one.
            </p>
            <h2>
                Getting Media Queries from CSS to JS
            </h2>
            <p>
                When I first started looking into this I thought I was in for some really hairy stuff. I imagined myself having to make ajax requests to fetch stylesheets, use weird regexes to find the <code>@media</code> rules, and employ other types of not-so-fun things. Luckily, this did not turn out to be the case.
            </p>
            <p>
                I've written small script that accomplishes the tasks I'm after, <a href="https://github.com/tylergaw/media-query-events/blob/master/js/mq-events.js">mqEvents.js is on Github</a> and a working example is at <a href="http://tylergaw.github.com/media-query-events/">tylergaw.github.com/media-query-events</a>.
            </p>
            <pre><code>(function () {
  var mqEvents = function (mediaChangeHandler) {
    var sheets = document.styleSheets,
        numSheets = sheets.length,
        mqls = {},
        mediaChange = function (mql) {
            console.log(mql);
        }

    if (mediaChangeHandler) {
      mediaChange = mediaChangeHandler;
    }

    for (var i = 0; i < numSheets; i += 1) {
      var rules = sheets[i].cssRules,
          numRules = rules.length;

      for (var j = 0; j < numRules; j += 1) {
        if (rules[j].constructor === CSSMediaRule) {
          mqls['mql' + j] = window.matchMedia(rules[j].media.mediaText);
          mqls['mql' + j].addListener(mediaChange);
          mediaChange(mqls['mql' + j]);
        }
      }
    }
  }

  window.mqEvents = mqEvents;
}());</code></pre>
            <p>
                I'm going to go through the code here and explain what's happening each step of the way.
            </p>
            <pre><code>var mqEvents = function (mediaChangeHandler)</code></pre>
            <p>
                The <code>mqEvents</code> function takes a single parameter, a function that will be called each time a media query is triggered.
            </p>
            <pre><code>var sheets = document.styleSheets,
    numSheets = sheets.length</code></pre>
            <p>
                The document contains an object of all loaded stylesheets. Our <code>sheets</code> variable is a list of <a href="https://developer.mozilla.org/en/DOM/stylesheet">StyleSheet</a> objects. <code>numSheets</code> is stored for convenience for when we loop over the list of stylesheets.
            </p>
            <pre><code>mediaChange = function (mql) {
  console.log(mql);
}

if (mediaChangeHandler) {
  mediaChange = mediaChangeHandler;
}
</code></pre>
            <p>
                If the <code>mediaChangeHandler</code> argument is not passed to <code>mqEvents</code>, a default function, <code>mediaChange</code> will handle each media query event. The default doesn't do much of anything. For the purpose of this script we just want to have something there.
            </p>
            <pre><code>for (var i = 0; i < numSheets; i += 1) {
  var rules = sheets[i].cssRules,
      numRules = rules.length;</code></pre>
            <p>
                Here we're looping over our <code>sheets</code> list to look at each loaded stylesheet. The <code>rules</code> variable is list of all the rules of the current stylesheet represented as <a href="https://developer.mozilla.org/en/DOM/cssRule">CSSRule</a> objects. <br><em>This is where things take a turn for the awesome.</em>
            </p>
            <p>
                At the start of this I was aware that all a document's stylesheets could be accessed and that all the rules of the stylesheets were represented by CSSRule objects, but what I didn't know was that CSSRule objects that contain a media query have a unique name. Take a look at this screen shot of the console when logging out each CSSRule object:
            </p>
            <figure>
              <img src='http://tylergaw.com/articles/assets/mqevents-cssrules-in-console.jpg' alt='Screenshot of the Chrome developer console showing a number of CSSRule objects being logged.'>
              <figcaption>Logging out each CSSRule object reveals a unique name for media query rules. Badass.</figcaption>
            </figure>
            <p>
                Regular CSS rules have the name "CSSStyleRule" while media queries have the name "CSSMediaRule". This is great because it gives us an easy way to pluck out only the media queries from our stylesheets without needing to resort to string parsing, which can get ugly quickly.
            </p>
            <p>
                (It looks like other types of rules like font-face and keyframes have <a href="https://developer.mozilla.org/en/DOM/cssRule#section_2">unique names too</a>.)
            </p>
            <pre><code>for (var j = 0; j < numRules; j += 1) {
  if (rules[j].constructor === CSSMediaRule)</code></pre>
            <p>
                We can now loop over each rule in the stylesheet and check to see if it is a media query. The condition here, checking to see if the constructor matches the name "CSSMediaRule", was also new to me. I found that approach in a thorough <a href="http://stackoverflow.com/a/332429/368634">Stack Overflow answer</a> on the topic.
            </p>
            <pre><code>mqls['mql' + j] = window.matchMedia(rules[j].media.mediaText);
mqls['mql' + j].addListener(mediaChange);
mediaChange(mqls['mql' + j]);</code></pre>
            <p>
                Now that we know we're only dealing with media queries, we're free to use them with matchMedia to create MediaQueryList objects, bind events to those and handle them with a given handler function. This bit of code is nearly the same as the matchMedia example. The noticeable exception here is that each MediaQueryList object is being added to a hash, <code>mqls</code>, that we created earlier. We could accomplish the same thing without putting each object in the hash, this was more of a forward-thinking thing. I have a feeling that there could be a use for holding on to all of the objects to access them later.
            </p>
            <h2>Usage</h2>
            <p>
                So why would you use this and what happens when you do? In the demo I linked to, this is the implementation:
            </p>
            <pre><code>var msg = document.getElementById('condition'),
    handleMediaChange = function (mql) {

  // For some reason Firefox has trouble always running this code.
  // The console.log seems to help it.
  // TODO: Figure out what the hell that's all about
  console.log();

  if (mql.matches) {
    msg.setAttribute('class', 'met');
    msg.innerHTML = 'The condition "' + mql.media + '" was met.';
  }
  else {
    msg.setAttribute('class', 'unmet');
    msg.innerHTML = 'The condition "' + mql.media + '" was not met.';
  }
};

mqEvents(handleMediaChange);</code></pre>
            <p>
                Notice the big comment about Firefox there, I still don't know what that is. Like I said, work-in-progress here.
            </p>
            <p>
                What this does is update a the DOM element, represented by <code>msg</code>, each time a media query is triggered. <code>mqEvents</code> doesn't try to react differently to specific media queries. It calls the same handler each time one is triggered. The handler function, however, does receive information about the media query. It knows what the media query is–which I'm placing in the DOM with <code>mql.media</code>–and if the condition was met by the window–which I'm checking with <code>mql.matches</code>.
            </p>
            <h2>What Else Can This Be Used For?</h2>
            <p>
                Maybe parts of the page layout are done with Javascript and need to be updated each time a media query is triggered. Maybe it could be used to do conditional loading of images, scripts, fonts, or the like. This type of conditional loading of assets could be used to help reduce the bandwidth usage on mobile devices.
            </p>
            <h2>Concerns and Caveats</h2>
            <p>
                If a page has a lot of media queries, <code>mqEvents</code> is going to add a lot of event listeners and it's going to be calling the handling function a lot of times. I haven't run into anything problematic with my small demo page, but I'd be curious to see the impacts on performance on a page with a substantial number of media queries.
            </p>
            <p>
                With all these fancy new things browser support is a big question. <code>matchMedia</code> is not supported very well yet. According to <a href="http://caniuse.com/#search=matchMedia">caniuse.com</a> we're looking at Chrome 17+, Firefox 9+, Safari 5.1+, iOS Safari 5.0+, IE 10+ (with an ms prefix), and no support yet for Opera. For unsupported browsers a polyfill could be employed. Here's a good one right <a href="https://github.com/paulirish/matchMedia.js/">here</a>.
            </p>
            <h2>Other Cool Stuff</h2>
            <p>
                As I was working on this I found out about a related project named <a href="http://harvesthq.github.com/harvey">Harvey</a>. I haven't used it yet, but it looks really good. It looks like it still has that duplication of media queries issue, but if you're looking for targeted reactions to specific media queries it might be the way to go.
            </p>
            <p>
              <i>Thanks for reading</i>
            </p>
        ]]>
    </description>
    <link>http://tylergaw.com/articles/reacting-to-media-queries-in-javascript</link>
    <guid>http://tylergaw.com/articles/reacting-to-media-queries-in-javascript</guid>
    <pubDate>Thur, 17 May 2012 07:15:35 -0400</pubDate>
  </item>
  <item>
    <title>Fun with HTML Form Validation Styles</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
      <![CDATA[
        <p>
        	<b>Brass tacks:</b> <em>Demos; <a href="http://lab.tylergaw.com/html5forms/errorStyles/01/">Style 01</a>, <a href="http://lab.tylergaw.com/html5forms/errorStyles/02/">Style 02</a>, <a href="http://lab.tylergaw.com/html5forms/errorStyles/03/">Style 03</a> and <a href="https://github.com/tylergaw/html5forms/tree/master/errorStyles">the code</a>.</em>
        </p>
        <p class="entry-intro">
        	If you haven't heard already, the current HTML Living Standard or HTML5 spec has in it some super cool form validation. This is client-side form validation that is meant to remove some of the burden of writing validation with Javascript. If you've ever written form validation with Javascript I think you'll agree that this is a very good thing.
        </p>
        <p>
          Using this new feature of html can be as easy as creating a form and within it creating an input with a <code>required</code> attribute. When the form is submitted, browsers that support validation will take the reigns and make sure that the required input has a value. If it does not, the browser will display a validation error message.
        </p>
        <p>
          In addition to validating required fields, the form validation will also check to make sure inputted values match given input types. New in the Living Standard are quite a few new input types such as; "email", "url", "number" and so on. Check out the full list located at <a href="http://developers.whatwg.org/the-input-element.html#the-input-element">http://developers.whatwg.org/the-input-element.html#the-input-element</a>.
        </p>
        <h2>Validation error messages</h2>
        <p>
          As of this writing, there are three browsers that both support html form validation and display error messages when needed. Browser support includes; Chrome 10+, Firefox 3.6+, and Opera 11+. Safari doesn't care about validating your forms and I haven't checked any versions of IE, maybe 9 or 10 support this? Each browser handles the styling of validation messages differently.
        </p>
        <figure>
          <img src='http://tylergaw.com/articles/assets/post_image_htmlFormErrors_defaultChrome.jpg' alt='Chrome 12 default error messages'>
          <figcaption>Chrome 13 default error message</figcaption>
        </figure>
        <figure>
          <img src='http://tylergaw.com/articles/assets/post_image_htmlFormErrors_defaultFirefox.jpg' alt='Firefox 5.0 default error messages'>
          <figcaption>Firefox 6.0 default error message</figcaption>
        </figure>
        <figure>
          <img src='http://tylergaw.com/articles/assets/post_image_htmlFormErrors_defaultOpera.jpg' alt='Opera 11.5 default error messages'>
          <figcaption>Opera 11.5 default error message</figcaption>
        </figure>
        <p>
          Of the three, only Chrome currently offers a way to apply custom styles to the message. Through non-standard, Webkit-specific pseudo classes you are able to style the messages in any way that floats your boat. That's what I'm focusing on with this article.
        </p>
        <h2>What about the other browsers?</h2>
        <p>
          That's a good question. I haven't heard anything about Opera, but it seems that the style and even handling of the error messages is an open discussion with Firefox. I did quite a bit of digging around in <a href="http://www.bugzilla.org/">Bugzilla</a> and in the FF 6 source code, but couldn't find any solid information on what the plan is. My hope is that a standard will emerge for styling the messages, but that could be far off.
        </p>
        <h2>The pseudo classes and markup</h2>
        <p>
          When I first started looking into if/how the error messages could be styled I quickly came across a "Rosetta Stone" in an article by Peter Gasston, <a href="http://www.broken-links.com/2011/06/16/styling-html5-form-validation-errors/">http://www.broken-links.com/2011/06/16/styling-html5-form-validation-errors</a>. In the post Peter explains the pseudo classes that webkit makes available to target the error message elements. He's done the leg work of digging through the Webkit source code to find this stuff, thanks Peter! To reiterate some of what is in Peter's article, the following are the classes that are available to hook into:
        </p>
        <pre><code>::-webkit-validation-bubble {}
      ::-webkit-validation-bubble-message {}
      ::-webkit-validation-bubble-arrow {}
      ::-webkit-validation-bubble-arrow-clipper {}</code></pre>
        <p>
          Each of those target a <code>&lt;div&gt;</code> element that is inserted into the DOM when a validation error is triggered. The markup looks like this:
        </p>
        <pre><code>&lt;div -webkit-validation-bubble&gt;
      &lt;div -webkit-validation-bubble-arrow&gt;&lt;/div&gt;
      &lt;div -webkit-validation-bubble-arrow-clipper&gt;&lt;/div&gt;
      &lt;div -webkit-validation-bubble-message&gt;Error Message&lt;/div&gt;
      &lt;/div&gt;</code></pre>
        <p>
          There are four more pseudo classes that were added as I was writing this article. These are currently only in the nightly builds of Chrome/Webkit and seem to just allow further control of the styling.
        </p>
        <pre><code>::-webkit-validation-bubble-icon {}
      ::-webkit-validation-bubble-body {}
      ::-webkit-validation-bubble-text-block {}
      ::-webkit-validation-bubble-arrow-heading {}</code></pre>
        <p>
          As of this writing and Chrome 13.0.782.112 these classes do not seem to have corresponding html elements. Only the <code>bubble-text-block</code> and <code>bubble-heading</code> contain default CSS rules and they are minimal and any CSS rules applied to these do not seem to affect any changes to the current validation error messages. We'll have to wait and see how these elements get put to use.
        </p>
        <h2>Default styles</h2>
        <p>
          A huge help when styling the messages is knowing the default styles that Chrome applies. Luckily the default Webkit CSS is available to peruse so you can see the exact properties that need to be modified. The default styles live here; <a href="http://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css">http://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css</a>
        </p>
        <h2>Demos</h2>
        <p>
          I set up three different demos using markup for a simple login form containing two fields. The first field is an email input that is required:
        </p>
        <pre><code>&lt;input type="email" name="email" required&gt;</pre></code>
        <p>
          The second field is a password input that is required:
        </p>
        <pre><code>&lt;input type="password" name="password" required&gt;</pre></code>
        <p>
          The rest of the markup for each demo is nearly identical, differences include; using <code>&lt;label&gt;</code> elements for the first demo and some different structural elements for each.
        </p>
        <p>
          To really work with the message styles, I wanted each demo to have a distinct style from the others. Demo 1 has a kind of standard-looking style with error messages that are big, bright and bubbly. Demo 2 has a sleeker, higher-tech, control panel-y look with a slimmed down error icon with no text. Demo 3 has an artsy, Draplin-inspired, Futura-filled look that carries over into big-ole, text only error messages.
        </p>
        <figure>
          <a href="http://lab.tylergaw.com/html5forms/errorStyles/01">
            <img src='http://tylergaw.com/articles/assets/post_image_htmlFormErrors_demo01.jpg' alt='Demo 01 style showing an error'>
          </a>
          <figcaption>Style 01; 37 Signals called, they want their form back</figcaption>
        </figure>
        <figure>
          <a href="http://lab.tylergaw.com/html5forms/errorStyles/02">
            <img src='http://tylergaw.com/articles/assets/post_image_htmlFormErrors_demo02.jpg' alt='Demo 02 style showing an error'>
          </a>
          <figcaption>Style 02; this is the login form for your Starcraft forum</figcaption>
        </figure>
        <figure>
          <a href="http://lab.tylergaw.com/html5forms/errorStyles/03">
            <img src='http://tylergaw.com/articles/assets/post_image_htmlFormErrors_demo03.jpg' alt='Demo 03 style showing an error'>
          </a>
          <figcaption>Style 03; hard to go wrong with fire engine-red Futura</figcaption>
        </figure>
        <h2>Fun with CSS animations</h2>
        <p>
          Something to keep in mind when styling the messages is that most any styles that are available in Chrome can be applied to the message bubbles, this includes animations. With demos 1 and 2 I created CSS animations to bring the messages into view. Since the message elements do not exist in the DOM until an error is triggered, the animations will not run until that time. So, in demo 1, to get that little shimmy and shake I'm using the following:
        </p>
        <pre><code>@-webkit-keyframes bounce {
      0% {
      opacity: 0.5;
      margin-left: 85px;
      }

      25% {
      margin-left: -35px;
      }

      50% {
      margin-left: 50px;
      }

      75% {
      margin-left: -22px;
      }

      100% {
      margin-left: -15px;
      opacity: 0.9;
      }
      }</pre></code>
        <p>
          The named animation is applied to the main message container;
        </p>
        <pre><code>::-webkit-validation-bubble {
      -webkit-animation-timing-function: ease;
      -webkit-animation: bounce 0.45s 1;
      ...
      }</code></pre>
        <p>
          Demo 2 uses a similar, but less complex animation to slide the serious looking icon in from the left. This demo also introduces something new; custom error message text. The message text, among many other things, can be customized through the Constraint Validation API.
        </p>
        <h2>Custom message text with the Constraint API</h2>
        <p>
          The Constraint API is a new one in the HTML Living Standard, it allows you to further customize form validation using Javascript. The API is large enough for a full article to explain its features and how to use it, here I'll just point out the code used to set a custom error message.
        </p>
        <pre><code>var inputs = document.getElementsByTagName('input'),
      len    = inputs.length,
      i      = 0,
      cur    = null,
      errMsg = '!';

      for (i; i &lt; len; i += 1) {

      cur = inputs[i];

      if (cur.getAttribute('type') !== 'submit') {
      cur.setCustomValidity(errMsg);

      cur.oninput = function () {
      if (!this.value || this.validity.typeMismatch) {
      this.setCustomValidity(errMsg);
      } else {
      this.setCustomValidity('');
      }
      }
      }
      }</code></pre>
        <p>
          This is a fairly simple block of code, we start by looking at each <code>input</code> element on the page through a <code>for</code> loop, if the <code>input</code> is not a submit button we then use the Constraint API method <code>setCustomValidity</code> to apply the custom message of "!" that we stored in the <code>errMsg</code> variable. In my opinion that should be the end of the work needed, but there is more.
        </p>
        <p>
          For some reason, when we set a custom error message with <code>setCustomValidity</code> that also removes the error checking from the input. If we were to stop here and submit the form, it would submit without triggering any errors. Starting at the line <code>cur.oninput</code> is the code needed to get around this oddity. The <code>oninput</code> event is fired each time a key is pressed that will change the contents of the input, each time the event fires we are checking to make sure the input has a value and that the value is valid according to the input type. The Constraint API makes available a <code>validity</code> property for <code>input</code> elements. This object contains a number of properties to determine the validity of the input, the one that we're using to make sure the value given is Ok is <code>typeMismatch</code>. If the input either has no value or the given value is not of the correct type, we need to set the custom message again. If a correct value has been entered we then set the custom validity to an empty string, which does a kind of reset on the validation. The input will then be validated normally again.
        </p>
        <h2>Going forward</h2>
        <p>
          This is definitely new, new stuff, and with all fun new things it will take some time before it can be used on a wide scale. I don't think that should be seen as a huge hinderance though. The Constraint API seems mature enough to be put into use right now, with the aide of a poly fill for browsers that don't yet support it. I haven't used it yet, but at least one exists already; <a href="http://afarkas.github.com/webshim/demos/demos/webforms.html">http://afarkas.github.com/webshim/demos/demos/webforms.html</a>. The error message bubbles are not really ready though. With only one browser supporting custom styles, and with no small amount of finagling needed to get them looking right, for now we'll need to keep creating our own error messages. I'll take it though, this is a huge step in the right direction and I can't wait for wider browser support and even more fun new things that will no doubt come with it.
        </p><p><i>Thanks for reading</i></p>]]>
    </description>
    <link>http://tylergaw.com/articles/fun-with-html-form-validation-styles</link>
    <guid>http://tylergaw.com/articles/fun-with-html-form-validation-styles</guid>
    <pubDate>Tue, 23 Aug 2011 09:33:55 -0400</pubDate>
  </item>
  <item>
    <title>A Small Redesign with a Little Sugar</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
      <![CDATA[  <p>
        	<b>Take aways:</b> <em>Look at <a href="http://lab.tylergaw.com/jribbble/">this site</a> and fork <a href="https://github.com/tylergaw/jribbble.com">this code</a> if you don't feel like reading.</em>
        </p>
        <p class="entry-intro">
        	Since reading <a href="http://www.abookapart.com/products/responsive-web-design">Responsive Web Design</a> by Ethan Marcotte I've been chomping at the bit to design a site using all of the fancy things written about in that little, yellow, different book. To really take those new ideas and techniques for a ride I needed a small project to work on where I could just go crazy and try every new thing I could pull out of the book and my brain. Luckily I have a never-ending stream of personal projects that can always use a little TLC. The project that I picked to revamp is a small one page site for a jQuery plugin that I wrote last year, Jribbble. The site is quick overview of the methods that the plugin makes available, documentation of those methods and some working demos.
        </p>
        <h2>The design process</h2>
        <p>
        	Before starting a design I like to set some rules for myself. These aren't hard and fast rules, just some general thoughts that I keep in mind to guide the process and keep myself in check. The rules for this design were nothing outlandish, the design should:
        </p>
        <ul>
          <li>Use a flexible grid that remains comfortable from 320px to 1280px in width</li>
          <li>Be designed mostly in the browser with CSS, limited Photoshop work</li>
          <li>Not use any gradients</li>
          <li>Not use any Photoshop noise!</li>
          <li>Have some bits of CSS "sugar"</li>
        </ul>
        <p>
        	The last rule, "sugar", I think of as something extra, something possibly new, that you might not see that often. I'll talk about it more later.
        </p>
        <p>
        	The first graphic I envisioned for the design was the name, Jribbble. I saw the "J" and the "b"s in a large, swooping style. A style that I would not be able to accomplish with a computer. I would need to use my hands. The vision I had for it was too large for a pencil or pen or marker. I grabbed my box of acrylic paints, brushes, my 14" x 17" drawing pad and spread them out on my definitely-not-for-painting-on Ikea coffee table. With a medium sized brush and Primary Magenta I scrawled out a couple of "Jribbble"s as well as some random strokes. The toothbrush you see in the photo I used for making paint spatters and for getting paint all over the damned place.
        </p>
        <figure>
      	  <img src='http://tylergaw.com/articles/assets/post_image_jribbble_painting.jpg' alt='Jribbble painting'>
      	  <figcaption>The start of the Jribbble redesign; a hand-painted logo.</figcaption>
      	</figure>
        <p>
        	After the painting I took the "Jribbble" I liked most into Photoshop and fiddled with it a bit. I isolated the color from the background, applied the Twirl filter a few times to give it more character and added some of the random strokes and splatters around it for a more haphazard look. In Photoshop I set up a 958px, 12 column grid to work off of. For the banner and assorted page headers I selected <a href="http://typekit.com/fonts/botanika-mono-web">Botanika Mono Web from Typekit</a>. I don't own that font so I have to use a very advanced and elegant method for playing around with initial type layout. I input the text I need into Typekit's Type Tester and take screenshots of the text from there. See, fancy ain't it?
        </p>
        <figure>
      	  <img src='http://tylergaw.com/articles/assets/post_image_jribbble_design.jpg' alt='Jribbble design'>
      	  <figcaption>Getting out of Photoshop as soon as possible, this was the extent of the design accomplished with the graphics monolith.</figcaption>
      	</figure>
        <p>
        	The image above is the extent of the design accomplished with Photoshop. From that point on the rest of the design was created with good ole' CSS. Just like I have always done in Photoshop I went through quite a few style iterations; colors, type sizes, positioning, but instead of spending that time in Photoshop and only moving to the browser when it was "final" I used the medium that would be delivered to create the design. Designing in the browser, it feels good man.
        </p>
        <h2>The flexibility</h2>
        <p>
        	To accomplish my flexible grid, I started with a overall width of 80% on the content area. That number was somewhat arbitrary, I started with 100% and decreased the number until I felt there was a comfortable amount of room between the edge of the browser and the beginning of the content. I am setting a <code>max-width</code> of 1280px on the content area. Any wider than that and things started to get a little unwieldy; line-lengths were too long and in general things just didn't look good. At browser widths of 768px or narrower I wanted to gain back some of the margin so I used a media query to increase the width to 95%.
        </p>
        <pre><code>#content {
      margin: 0 auto;
      max-width: 1280px;
      width: 80%;

      @media screen and (max-width: 768px) {
      width: 95%;
      }
      }</code></pre>
        <p>
        	<em>Quick note on the media query. I'm using <a href="http://sass-lang.com/">Sass</a> which allows for nested styles. You'll see more of this in later code examples.</em>
        </p>
        <p>
        	In a number of areas of the design I use a two-column layout. To determine the widths of each column I used the oh-so-helpful formula that Ethan describes in <abbr title="Responsive Web Design">RWD</abbr>: <br>
        </p>
        <pre><code>target &divide; context = result</code></pre>
        <p>
        	For the columns I use the starting width of 958px as a context then determine a pixel value based off the width of each of my grid columns, 69px, to come up with widths like:
        </p>
        <pre><code>.method-description {
      h3 {
      float: left;
      width: 40.1878914%; /* 385 &divide; 958 = .401878914 */
      ...
      }

      p {
      float: right;
      ...
      width: 56.4718163%; /* 541 &divide; 958 = .564718163 */
      }
      }</code></pre>
        <h2>More on media queries</h2>
        <p>
        	Throughout the design I used media queries to add more fine tuning of styles that I couldn't accomplish with percentages alone. I decrease font sizes, switch to single column layouts and make other miscellaneous tweaks as the browser width decreases or increases to specified break points. For cross browser media query support I used the <a href="https://github.com/scottjehl/Respond">Respond.js</a> poly fill. It works great, media queries in IE7, you can't beat that with a stick! I needed to make some specific enhancements based on features as well so I used <a href="http://www.modernizr.com/">Modernizer</a> for feature detection. I included Respond.js in my Modernizer build.
        </p>
        <h2>The good stuff, the sweetness, the sugar</h2>
        <p>
        	How does a die-cut, scaleable background image sound? I thought it sounded pretty rad. I'll explain. I had the idea that I wanted the "Jribbble" graphic to be different colors at different times. One way to accomplish that would have been to make a number of different images in the various colors that I wanted. That would work, but I thought I could do it a more efficient way. What I did was create an image that had a set background color of <code>#ececec</code> with the text itself transparent allowing for a background color to show through.
        </p>
        <figure>
          <img src='http://tylergaw.com/articles/assets/post_image_jribbble_transparent.jpg' alt='Jribbble background image'>
          <figcaption>
            The die-cut .png used to create the color-shifting Jribbble logo.
          </figcaption>
        </figure>
        <p>
        	With die-cut taken care of, let's look at scaleable. At its base size of 1149px by 663px the logo graphic is pretty large. At medium to large browser widths, this works fine, as the browser width decreases or increases the graphic starts to lose its intended effect and also starts to cause readability issues for other page elements. <code>background-size</code> to the rescue!
        </p>
        <pre><code>#bigAssJribbble {
      background-image: url(../images/branding-die-cut.png);
      background-repeat: no-repeat;
      background-position: 15% 100%;
      -moz-background-size: 190% 140%;
      -webkit-background-size: 190% 140%;
      -o-background-size: 190% 140%;
      background-size: 190% 140%;
      padding-top: 45%;
      position: absolute;
      width: 100%;
      }</code></pre>
        <p>
        	A couple things are going on here. It's important to note that the branding-die-cut.png image is much wider than it needs to be. The graphic is flush left and the right side extends ~1049px and is filled with our background color <code>#ececec</code>. I do this so I am able to position the background image off the left side of the browser and not leave a gap on the right side. If there was a gap that the image didn't cover, any background color would show through where I didn't want. The width of the element is set to 100% so it is always the size of the browser. The <code>background-size</code> property does exactly what it says, it scales the background image to the percentages that I used. There isn't a science to those numbers, I just tweaked them until they looked right.
        </p>
        <p>
        	Another cool thing in that block of CSS is the <code>padding-top</code>. Since an element has to be taller than 0px for a background image to show and I didn't want to set an explicit height due to the changing graphic size I used the percentage padding to give the element a height. Again, no science with that number, just changed it until it worked.
        </p>
        <p>
        	Something that's not accounted for in the above CSS is the background color, the color that should show through the die-cut image. This is where I started having a lot of fun. I set up 11 media queries at different pixel max-widths from 320px to 2360px, at each of those I set a different background color for the logo as well as a number of different elements on the page. As the browser width increases or decreases the background color changes. Another little extra I use is a CSS transition to smoothly change from one color to another on each of the chameleon-like elements. An example element with a media query colorway:
        </p>
        <pre><code>#bigAssJribbble {
      -moz-transition: background-color 0.2s;
      -webkit-transition: background-color 0.2s;
      -o-transition: background-color 0.2s;
      transition: background-color 0.2s;
      }

      @media screen and (max-width: 480px) {
      #bigAssJribbble {
      background-color: #4400ff;
      }
      }</code></pre>
        <p>
        	I didn't get incredibly specific with what colors I chose. I started with a base of <code>#ff0066</code> and then apply cooler colors as the width decreases and warmer as it increases.
        </p>
        <p>
        	That's CSS sugar in my view. It's not something that everyone will see, but it's just a little extra for those that are looking and into that sort of thing.
        </p>
        <h2>That's all</h2>
        <p>
        	All in all a very fun process full of experimentation and learning for the sake of experimentation and learning. It probably took too long, so it goes. Side projects live in the off hours, the small windows of time before and after the "real" work and in the hours when you probably need to be sleeping.
        </p>
        <p>
        	Again, the completed site lives here <a href="http://lab.tylergaw.com/jribbble">http://lab.tylergaw.com/jribbble</a> and if you're interested in more of the code, fork it from its Github repo <a href="https://github.com/tylergaw/jribbble.com">https://github.com/tylergaw/jribbble.com</a>.
        </p>
        <p>
        	<i>Thanks for reading</i>
        </p>
      ]]>
    </description>
    <link>http://tylergaw.com/articles/a-small-redesign-with-a-little-sugar</link>
    <guid>http://tylergaw.com/a-small-redesign-with-a-little-sugar</guid>
    <pubDate>Sat, 09 Jul 2011 19:14:52 -0400</pubDate>
  </item>
  <item>
    <title>All Talkie Talkie</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
      <![CDATA[<p>
  	    <figure>
  	      <a href='http://lab.tylergaw.com/whatsgoingonwithcss'>
  	        <img src='http://tylergaw.com/articles/assets/post_image_whatupcss.jpg' alt='View the presentation slides'>
  	      </a>
  	      <figcaption>
      	    View the slides
      	  </figcaption>
  	    </figure>
  	  </p>
  	  <p>
  	    On Tuesday, the 25th I presented an introduction of CSS3 features to a great group of folks at <a href="http://refreshnyc.org/">Refresh NYC</a>. The new features included in CSS3 are something that I'm really interested in and very excited about so it was a good opportunity to really dig in and learn a whole lot about them in a short amount of time. For my slides I decided to not take the Keynote route and instead decided to create the presentation as HTML, CSS, and Javascript. It turned out great, not only did I get to explore the sweetness of CSS3 for the sake of presenting the information, I also used a lot of the features I was talking about to build the presentation.
  	  </p>
  	  <p>
  	    This was the first time I had put together a presentation like this and got up in front of a crowd to present it, and I loved every minute of it. You really gain a deeper knowledge of a topic when you are trying to explain it to someone else. I'm definitely going to do this again in the near future and if you've had any interest in doing so I would highly recommend it.
  	  </p>
  	  <p>
      	<i>Thanks for reading</i>
      </p>]]>
    </description>
    <link>http://tylergaw.com/articles/all-talkie-talkie</link>
    <guid>http://tylergaw.com/articles/all-talkie-talkie</guid>
    <pubDate>Thu, 27 May 2010 11:18:00 -0400</pubDate>
  </item>
  <item>
    <title>You Did What with What?</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
      <![CDATA[<p class="entry-intro">
        <a href='http://lab.tylergaw.com/themanfromhollywood'>
          <img src='http://tylergaw.com/articles/assets/post_image_hollywood.jpg' alt='View the demo'>
        </a>
      </p>
      <h2>Stuff You'll Most Likely Do Before Reading Any of This Post</h2>
      <p>
        <a href='http://lab.tylergaw.com/themanfromhollywood'>View the demo</a>
        <a href='http://github.com/tylergaw/themanfromhollywood'>Fork it</a><br>
        <em>You'll need Safari or Chrome to view the demo</em>
      </p>
      <p>
        There have been a ton of new, really exciting things going on with CSS over the past couple years and I've had an itch for a while to work with them. I started out just wanting to do a small project to get familiar with some of the newer, more advanced CSS3 features, and it quickly grew into a two month immersion into CSS3 land.
      </p>
      <h2>Do they speak English in what?</h2>
      <p>
        A few years back Jarrat Moody, a super talented designer, created a kinetic type <a rel='external' href='http://www.youtube.com/watch?v=HePWBNcugf8'>motion graphics piece</a> based on a scene from the movie Pulp Fiction; that I am still floored by to this day. Since I saw that I have wanted to create a similar piece and even made a few attempts using After Effects, none of which ever really materialized.
      </p>
      <h2>Let's do this!</h2>
      <p>
        So I have my excitement over a new feature set, and inspiration from Mr. Moody, time to get to it. <a href='http://lab.tylergaw.com/themanfromhollywood'>The Man From Hollywood</a> is a kinetic type animation using only HTML, CSS and Javascript. All of the animation is done using Webkit CSS transition, transforms, as well as standard CSS properties. Javascript just acts as a helper to turn CSS classnames on and off at the appropriate times. All of the content you see on the demo is HTML and CSS, no images were used. The audio clip is scene from the movie <a rel='external' href='http://www.imdb.com/title/tt0113101/'>Four Rooms</a>
      </p>
      <h2>Is it practical?</h2>
      <p>
        No, not really, but it's not really supposed to be. My goals were to teach myself the ins and outs of a new feature set, make something fun to look at, and hopefully help and/or inspire others to work on their own CSS3 awesomeness.
      </p>
      <p>
        If you enjoy it, you should <a href="http://twitter.com/home?status=@thegaw is the awesomest dude on the planet because of this: http://bit.ly/9rOtd4">Tweet it</a> or share it on your blog or just whisper the URL into a co-worker's ear. That last one would definitely be the best.
      </p>
      <p>
      	<i>Thanks for reading</i>
      </p>]]>
    </description>
    <link>http://tylergaw.com/articles/you-did-what-with-what</link>
    <guid>http://tylergaw.com/articles/you-did-what-with-what</guid>
    <pubDate>Tue, 06 Apr 2010 22:09:00 -0400</pubDate>
  </item>
  <item>
    <title>I Less Than Three IE6</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
      <![CDATA[<p class="entry-intro">
    	  I am not a fan of the Die IE6 Campaigns, can't get behind them. You will not see me sporting some goofy <a href='http://twibbon.com/join/IE6-Must-Die' rel='external'>IE6 Must Die Twibbon</a> any time soon. I take a pretty unpopular position on IE6; I do not mind developing for IE6, working with it over the past few years has made me a better, smarter developer and I am going to miss it a bit when It's completely out of the picture. Whoa, look out, you're probably thinking I'm bat-shit crazy by now, but hear me out. I have reasons.
    	</p>
    	<p>
    	  <strong>1. It pushes you to write proper, lightweight HTML markup: </strong>
    	  IE6 has well-known issues with the box model, strange padding and margin issue, etc. One very good way to stop these potential CSS issues is to write good markup. Easy things like making sure you are writing semantic, valid markup and using <code>&lt;div&gt;</code> tags sparingly can knock out probably 95% of these issues that seem to be such a problem for so many. In my experience, most folks' CSS issues aren't CSS issues at all, they are HTML issues.
    	</p>
    	<p>
    	  <strong>2. It gives you yet another chance to get creative: </strong>
    	  So what if IE6 doesn't support transparent pngs. Find a way to make that image a transparent gif or a jpg. Doesn't look as crisp as the png? So what, this is where progressive enhancement steps in, this is why we have conditional comments. Set up an IE6 stylesheet and dump all of the not so desirable CSS in there. Chances are most of your users are not on IE6 anyway, and if they are this can be a friendly little jab at them for using it. I took this route when building my site. I wanted to let anyone viewing my site with The 6 know that they are missing out so I created a completely stripped down version just for IE6, plus a nice reminder of why. It still works, you can access all the same content, it's just not pretty.
    	</p>
    	<figure>
    	  <img src='http://tylergaw.com/articles/assets/post_image_tgawie6_thumb.jpg' alt='tylergaw.com IE6 Screenshot'>
    	  <figcaption>Users of IE6 receive a version of tylergaw.com that contains all the same content, but has a very pared-down aesthetic.</figcaption>
    	</figure>
    	<p>
    	  <strong>3. It forces you to clean up sloppy code that other browsers ignore: </strong>
    	  I've seen this a number of times when writing Javascript. Take a look at this bit of JS:
    	</p>
    	<pre><code>var someCrud = ['item01', 'item02', 'item03',];
alert(someCrud.length);</code></pre>
      <p>
        What's the length of the array? Firefox and Safari say 3. IE6 says 4. I'm siding with The 6 on this one, the comma at the end of the array is erroneous, it should not be there. IE6 sends the message that you should clean up your code by recognizing the extra item while the more advanced browsers ignore it and let you go on your sloppy way. This is just one example, I've come across a number of similar examples over the years, I'm sure others have too.
      </p>
      <p>
        <strong>4. It keeps you on your toes: </strong>
        If you're building websites you need to be flexible. Not all environments are going to be picture perfect, and knowing how to find solutions to problems that arise when working with a browser like The 6 is key. It's easy to just say that a browser is the sole reason for not getting something to function well. Another look at it may reveal that the first approach taken was maybe not the best. You just have to put on that thinking cap a bit.
      </p>
      <p>
        <strong>5. It's good to have a nemesis: </strong>
        What good is Batman without the Joker? You have to have someone or something that challenges you and makes your job harder, and sometimes downright frustrating. Web development is hard, that's why it's fun. How good a feeling is it to confront a problem in development and find some interesting way around it? I got a whole crappy article out of doing just that.
      </p>
      <p>
        This viewpoint is 100% from that of a developer. As a user, I agree using IE6 would just be a nightmare. The security issues, the lack of features that modern browsers have, etc., etc. That is one merit that the Die IE6 campaigns have. But every time I see some Johnny Developer complaining about how hard it is to build websites for IE6 and how much they hate it, I can't help but think that that person is missing out on opportunities to use their noggin. And that they are a bit of a wimp. :)
      </p>
      <p>
        After IE6 is gone some other browser will take it's place as the whipping boy. IE7? So, instead of just joining a campaign of wishing death on an inanimate object, I say learn to take away as much knowledge as you can from a less-than-ideal situation. Like Kuato said, "<a href='http://www.youtube.com/watch?v=xO1kKemcwYk' rel='external'>Open your miiinddddd.</a>"
      </p>
      <p>
        <i>Thanks for reading</i>
      </p>]]>
    </description>
    <link>http://tylergaw.com/articles/i-less-than-three-ie6</link>
    <guid>http://tylergaw.com/articles/i-less-than-three-ie6</guid>
    <pubDate>Mon, 27 Jul 2009 00:41:00 -0400</pubDate>
  </item>
  <item>
    <title>Ch-ch-ch-changes!</title>
    <dc:creator>Tyler Gaw</dc:creator>
    <description>
      <![CDATA[<p class="entry-update">
        <b>Update:</b> This post was about the previous version of this site, <a href="http://v3.tylergaw.com">version 3</a>.
      </p>
    	<p class="entry-intro">
    	  I slapped a fresh coat on the old website. Well, new paint, siding, frame, foundation...who am I kidding? I just burned down the old one and built anew on its smoldering ashes.
    	</p>
    	<p>
    	  This is the third incarnation of tylergaw.com and just like the past two versions, I've had a damn good time working on this one. I've been able to take the time to work with so much amazing code that I've never really dug into before. This is the first full site I've built using the <a href='http://framework.zend.com/'>Zend Framework</a> which has just made me realize how completely rad it is working with a rock-solid framework. It also makes me kick myself a little for not picking it up a long time ago. I'm integrating with a number of different third party APIs, this is also the first time I've built a site doing that. How freaking cool is working with well-written, well-documented APIs?
    	<p>
    	<p>With the visual design, I've really tried to push it in a direction that I think is, "me". This was one of those designs that I could really see in my head before I opened Photoshop or even put one thing down on paper. The biggest inspiration came from the cover art for <a href='http://en.wikipedia.org/wiki/Women_%28novel%29'>Charles Bukowski's Women</a>. The whole time I was reading the book, I was constantly looking back at the cover. I don't know exactly what it is but it is just so damned cool. For this round, I started the design process the old fashioned way; I grabbed a six-pack, some colored pencils, a big-ass sketch book and then went to work.
    	</p>
    	<figure>
        <img class="image-vertical" src='http://tylergaw.com/articles/assets/post_image_women.jpg' alt='Bukowski - Women'>
        <figcaption>The cover of Charles Bukowski's "Women" was a main source of inspiration for the aesthetics.</figcaption>
      </figure>
      <figure>
        <img class="image-vertical" src='http://tylergaw.com/articles/assets/post_image_tgaw2009sketch.jpg' alt='tgaw2009 Sketch'>
        <figcaption>Starting a design with paper and pencil allows for quick iteration and time to really nail down the overall vision.</figcaption>
      </figure>
      <p>
        I'm a big fan of organic textures and knew that I wanted to incorporate some into the design. When I sat down in Photoshop to start turning my sketch into a working design, I realized quickly that I was going to need some real-world help getting the organic look and feel that I was going for. When it's time for real-world textures I just start grabbing <a href='http://tylergaw.com/articles/assets/post_image_art01.jpg'>anything</a>, and I mean <a href='http://tylergaw.com/articles/assets/post_image_samich.jpg'>anything</a>, and throw it on the scanner. You never know what you might use that scan of an old broken toothbrush for. Just to be sure, scan it!
      </p>
      <p>
        <i>Thanks for reading</i>
      </p>]]>
    </description>
    <link>http://tylergaw.com/articles/ch-ch-ch-changes</link>
    <guid>http://tylergaw.com/articles/ch-ch-ch-changes</guid>
    <pubDate>Thu, 18 Jun 2009 21:42:00 -0400</pubDate>
  </item>
</channel>
</rss>